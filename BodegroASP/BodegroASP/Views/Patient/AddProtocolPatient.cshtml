@using BodegroASP.Models
@model BodegroASP.Models.AddProtocolPatientViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Protocols</title>
    <style>
        .container {
            max-width: 800px;
            margin: 0 auto;
            font-family: Arial, sans-serif;
        }

        .patient-card, .subscriptions, #protocol-linking-section {
            margin-bottom: 2rem;
            padding: 1rem;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        .hidden {
            display: none;
        }

        ul {
            list-style-type: none;
            padding: 0;
        }

        .subscription-item {
            margin-bottom: 1rem;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 6px;
            background-color: #fff;
        }

        .add-protocol, .view-steps {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }

            .add-protocol:hover, .view-steps:hover {
                background-color: #0056b3;
            }

        #link-protocol-button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
        }

            #link-protocol-button:hover {
                background-color: #218838;
            }

        #protocol-steps-content {
            margin-top: 1rem;
            padding: 1rem;
            border: 1px solid #ddd;
            border-radius: 6px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Patient Information Card -->
        <div class="patient-card">
            <h2>Patient Information</h2>
            <p><strong>Name:</strong> @Model.Patient.Name</p>
            <p><strong>Email:</strong> @Model.Patient.Email</p>
            <p><strong>Phone:</strong> @Model.Patient.PhoneNumber</p>
            <p><strong>Medical History:</strong> @Model.Patient.MedicalHistory</p>
        </div>

        <!-- Protocols List -->
        <div class="subscriptions">
            <h2>Available Protocols</h2>
            <ul>
                @foreach (var protocol in Model.Protocols)
                {
                    <li class="subscription-item">
                        <p><strong>Protocol Name:</strong> @protocol.Name</p>
                        <p><strong>Description:</strong> @protocol.Description</p>
                        <button type="button" class="add-protocol" onclick="selectProtocol(@Html.Raw(Json.Serialize(protocol)))">
                            Add
                        </button>
                        <button type="button" class="view-steps" onclick="viewProtocolSteps(@Html.Raw(Json.Serialize(protocol)), this)">
                            View Steps
                        </button>
                    </li>
                }
            </ul>
        </div>

        <!-- Protocol Linking Section -->
        <div id="protocol-linking-section" class="hidden">
            <h2>Link Protocol to Patient</h2>
            <div class="selected-details">
                <div class="selected-patient">
                    <h3>Patient</h3>
                    <p><strong>Name:</strong> <span id="selected-patient-name"></span></p>
                    <p><strong>Email:</strong> <span id="selected-patient-email"></span></p>
                </div>
                <div class="selected-subscription">
                    <h3>Protocol</h3>
                    <p><strong>Protocol Name:</strong> <span id="selected-protocol-name"></span></p>
                    <p><strong>Description:</strong> <span id="selected-protocol-description"></span></p>
                </div>
            </div>
            <button type="button" id="link-protocol-button" onclick="linkProtocol()">Link Protocol to Patient <span id="patient-name-placeholder"></span></button>
        </div>

        <!-- Protocol Steps -->
        <div id="protocol-steps-content" class="hidden"></div>
    </div>

    <script>
        let selectedPatient = @Html.Raw(Json.Serialize(Model.Patient)); // Patient data
        let selectedProtocol = null;

        function selectProtocol(protocol) {
            selectedProtocol = protocol;

            document.getElementById('selected-patient-name').innerText = selectedPatient.Name;
            document.getElementById('selected-patient-email').innerText = selectedPatient.Email;

            document.getElementById('selected-protocol-name').innerText = protocol.Name;
            document.getElementById('selected-protocol-description').innerText = protocol.Description;

            document.getElementById('patient-name-placeholder').innerText = selectedPatient.Name;

            document.getElementById('protocol-linking-section').classList.remove('hidden');
        }

        function linkProtocol() {
            if (selectedPatient && selectedProtocol) {
                fetch('/LinkProtocolToPatient', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        patient: selectedPatient,
                        protocol: selectedProtocol
                    })
                }).then(response => {
                    if (response.ok) {
                        alert('Protocol linked successfully!');
                        window.location.href = '/Index';
                    } else {
                        alert('Failed to link protocol');
                    }
                }).catch(error => {
                    console.error('Error linking protocol:', error);
                    alert('An error occurred.');
                });
            }
        }

        function viewProtocolSteps(protocol, button) {
            let stepsContainer = document.getElementById('protocol-steps-content');

            // Toggle visibility of the steps container
            const isVisible = !stepsContainer.classList.contains('hidden');
            if (isVisible) {
                stepsContainer.classList.add('hidden');
                button.innerText = "View Steps";
                return;
            }

            // Populate steps
            let steps = protocol.Steps || [];
            let stepsContent = '<ul>';
            steps.forEach(step => {
                stepsContent += `
                            <li>
                                <strong>Step ${step.Order}:</strong> ${step.Name} <br>
                                <em>${step.Description}</em> <br>
                                <strong>Interval:</strong> ${step.Interval} days <br>
                                <strong>Test:</strong> ${step.Test}
                            </li>`;
            });
            stepsContent += '</ul>';
            stepsContainer.innerHTML = stepsContent;

            stepsContainer.classList.remove('hidden');
            button.innerText = "Close Steps";
        }
    </script>
</body>
</html>
