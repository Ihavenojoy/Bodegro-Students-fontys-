@using BodegroASP.Models
@model BodegroASP.Models.AddProtocolPatientViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Protocols</title>
    <style>
        .container {
            max-width: 900px;
            margin: 0 auto;
            font-family: Arial, sans-serif;
        }

        .patient-card, .subscriptions, .calendar-container {
            margin-bottom: 2rem;
            padding: 1rem;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        .hidden {
            display: none;
        }

        ul {
            list-style-type: none;
            padding: 0;
        }

        .subscription-item {
            margin-bottom: 1rem;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 6px;
            background-color: #fff;
        }

        .add-protocol, .view-steps {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }

            .add-protocol:hover, .view-steps:hover {
                background-color: #0056b3;
            }

        #protocol-steps-content {
            margin-top: 1rem;
            padding: 1rem;
            border: 1px solid #ddd;
            border-radius: 6px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Patient Information Card -->
        <div class="patient-card">
            <h2>Patient Information</h2>
            <p><strong>Name:</strong> @Model.Patient.Name</p>
            <p><strong>Email:</strong> @Model.Patient.Email</p>
            <p><strong>Phone:</strong> @Model.Patient.PhoneNumber</p>
            <p><strong>Medical History:</strong> @Model.Patient.MedicalHistory</p>
        </div>

        <!-- Calendar Section -->
        <div class="calendar-container">
            <h2>Select Start Date</h2>
            <input type="date" id="start-date-picker" value="@DateTime.Now.ToString("yyyy-MM-dd")" />
        </div>

        <!-- Protocols List -->
        <div class="subscriptions">
            <h2>Available Protocols</h2>
            <ul>
                @foreach (var protocol in Model.Protocols)
                {
                    <li class="subscription-item">
                        <p><strong>Protocol Name:</strong> @protocol.Name</p>
                        <p><strong>Description:</strong> @protocol.Description</p>
                        <button type="button"
                                class="add-protocol"
                                data-protocol='@Html.Raw(Json.Serialize(protocol))'
                                onclick="subscribeToProtocol(this)">
                            Subscribe
                        </button>
                        <button type="button"
                                class="view-steps"
                                data-protocol='@Html.Raw(Json.Serialize(protocol))'
                                onclick="viewProtocolSteps(this)">
                            View Steps
                        </button>
                    </li>
                }
            </ul>
        </div>

        <!-- Protocol Steps -->
        <div id="protocol-steps-content" class="hidden"></div>
    </div>

    <!-- Hidden Form for Submission -->

    <form id="subscription-form" action="@Url.Action("ConfirmProtocolLinking", "Patient")" method="post" class="hidden">
        <input type="hidden" name="Patient" id="patient-input" />
        <input type="hidden" name="Protocol" id="protocol-input" />
        <input type="hidden" name="StartDate" id="start-date-input" />
    </form>


    <script>
        // Patient Data
        let selectedPatient = @Html.Raw(Json.Serialize(Model.Patient));

        // Function to handle subscription creation
        function subscribeToProtocol(button) {
            // Get protocol data from button's data attribute
            let protocol = JSON.parse(button.getAttribute('data-protocol'));
            let startDate = document.getElementById('start-date-picker').value;

            if (!startDate) {
                alert("Please select a start date.");
                return;
            }

            // Populate form data
            document.getElementById('patient-input').value = JSON.stringify(selectedPatient);
            document.getElementById('protocol-input').value = JSON.stringify(protocol);
            document.getElementById('start-date-input').value = startDate;

            // Submit form
            document.getElementById('subscription-form').submit();
        }

        // Function to view protocol steps
        function viewProtocolSteps(button) {
            // Parse the protocol JSON from the button's data attribute
            let protocol = JSON.parse(button.getAttribute('data-protocol'));

            let stepsContainer = document.getElementById('protocol-steps-content');

            // Toggle visibility of the steps container
            const isVisible = !stepsContainer.classList.contains('hidden');
            if (isVisible) {
                stepsContainer.classList.add('hidden');
                button.innerText = "View Steps";
                return;
            }

            // Populate steps
            let steps = protocol.Steps || [];
            let stepsContent = '<ul>';
            steps.forEach((step, index) => {
                stepsContent += `
                            <li>
                                <strong>Step ${index + 1}:</strong> ${step.Name} <br>
                                <em>${step.Description}</em> <br>
                                <strong>Interval:</strong> ${step.Interval} days <br>
                                <strong>Test:</strong> ${step.Test}
                            </li>`;
            });
            stepsContent += '</ul>';
            stepsContainer.innerHTML = stepsContent;

            stepsContainer.classList.remove('hidden');
            button.innerText = "Close Steps";
        }
    </script>
</body>
</html>
