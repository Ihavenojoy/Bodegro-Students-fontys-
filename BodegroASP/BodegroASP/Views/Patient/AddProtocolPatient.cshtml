@using BodegroASP.Models
@model BodegroASP.Models.AddProtocolPatientViewModel
@{
    if (ViewBag.UserRole == "Admin")
    {
        Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_LayoutDoctor.cshtml";
    }
    @if (TempData["SuccessMessage"] != null)
    {
        <script type="text/javascript">
            alert('@TempData["SuccessMessage"]');
        </script>
    }

    if (TempData["ErrorMessage"] != null)
    {
        <script type="text/javascript">
            alert('@TempData["ErrorMessage"]');
        </script>
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Protocols</title>
    <style>
        .container {
            max-width: 900px;
            margin: 0 auto;
            font-family: Arial, sans-serif;
        }

        .patient-card, .subscriptions, .calendar-container {
            margin-bottom: 2rem;
            padding: 1rem;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        .hidden {
            display: none;
        }

        ul {
            list-style-type: none;
            padding: 0;
        }

        .subscription-item {
            margin-bottom: 1rem;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 6px;
            background-color: #fff;
        }

        .add-protocol, .view-steps {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }

            .add-protocol:hover {
                background-color: #0CAD00;
            }

            .view-steps:hover {
                background-color: #0056b3;
            }

        #protocol-steps-content {
            margin-top: 1rem;
            padding: 1rem;
            border: 1px solid #ddd;
            border-radius: 6px;
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Patient Information Card -->
        <div class="patient-card">
            <h2>Patiënt Informatie</h2>
            <p><strong>Naam:</strong> @Model.Patient.Name</p>
            <p><strong>Email:</strong> @Model.Patient.Email</p>
            <p><strong>Telefoon nr.:</strong> @Model.Patient.PhoneNumber</p>
            <p><strong>Medische geschiedenis:</strong> @Model.Patient.MedicalHistory</p>
        </div>

        <!-- Calendar Section -->
        <div class="calendar-container">
            <h2>Selecteer een Start Datum</h2>
            <input type="date" id="start-date-picker" value="@DateTime.Now.ToString("yyyy-MM-dd")" />
        </div>

        <!-- Protocols List -->
        <div class="subscriptions">
            <h2>Toegankelijke Protocolen</h2>
            <ul>
                @foreach (var protocol in Model.Protocols)
                {
                    var protocolData = new
                    {
                        patientId = Model.Patient.ID, // Adjust if property names differ
                        protocolId = protocol.ID,
                        name = protocol.Name, // Optional, for additional display in JavaScript
                        description = protocol.Description // Optional
                    };

                    <li class="subscription-item">
                        <p><strong>Protocol naam:</strong> @protocol.Name</p>
                        <p><strong>Descriptie:</strong> @protocol.Description</p>
                        <button type="button"
                                class="add-protocol"
                                data-protocol='@Html.Raw(Json.Serialize(protocolData))'
                                onclick="subscribeToProtocol(this)">
                            Voeg toe
                        </button>
                        <button type="button"
                                class="view-steps"
                                data-protocol='@Html.Raw(Json.Serialize(protocolData))'
                                onclick="viewProtocolSteps(this)">
                            Bekijk Stappen
                        </button>
                    </li>
                }
            </ul>
        </div>

        <!-- Protocol Steps -->
        <div id="protocol-steps-content" class="hidden"></div>
    </div>

    <!-- Hidden Form for Submission -->

    <form id="ConfirmProtocolLinkingViewModel-form" action="@Url.Action("ConfirmProtocolLinking", "Patient")" method="post">
    <input type="hidden" name="Patient.ID" id="patient-input" value="@Model.Patient.ID" />
    <input type="hidden" name="Protocol.ID" id="protocol-input" />
    <input type="hidden" name="StartDate" id="start-date-input" />
</form>



    <script>
        // Patient Data
        let selectedPatient = @Html.Raw(Json.Serialize(Model.Patient));

        // Function to handle subscription creation
        function subscribeToProtocol(button) {
        // Get protocol data from button's data attribute
        let protocol = JSON.parse(button.getAttribute('data-protocol'));
        let startDate = document.getElementById('start-date-picker').value;

        if (!startDate) {
            alert("Please select a start date.");
            return;
        }

        // Populate form fields with selected protocol and patient
        document.getElementById('protocol-input').value = protocol.ID;
        document.getElementById('patient-input').value = @Html.Raw(Model.Patient.ID);
        document.getElementById('start-date-input').value = startDate;

        // Submit the form
        document.getElementById('SubscriptionViewModel-form').submit();
    }

        function subscribeToProtocol(button) {
            // Parse protocol data from button's data attribute
            const protocol = JSON.parse(button.dataset.protocol);

            // Get the selected start date from the input field
            const startDateInput = document.getElementById('start-date-picker');
            const startDate = startDateInput.value; // Ensure it's in 'yyyy-MM-dd' format

            // Validate the selected date
            if (!startDate) {
                alert('Please select a start date.');
                return;
            }

            // Send POST request to save subscription
            fetch('@Url.Action("SaveSubscription", "Patient")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    Patientid: protocol.patientId,  // Match ViewModel property names
                    Protocolid: protocol.protocolId,
                    StartDate: startDate           // Use selected date from input
                })
            })
            .then(response => {
                if (response.redirected) {
                    // Redirect to the returned URL
                    window.location.href = response.url;
                } else if (!response.ok) {
                    // Handle errors (e.g., 400 or 500 status codes)
                    return response.text().then(text => { throw new Error(text); });
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("An error occurred while saving the subscription: " + error.message);
            });
        }


    </script>
</body>
</html>
